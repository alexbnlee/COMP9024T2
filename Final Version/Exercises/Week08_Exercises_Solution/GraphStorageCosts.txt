a. 
An AM representation requires a V*V matrix of 4 bytes each, regardless of the number of edges.
It also requires an array of V pointers.
This gives a size of 4*V*V + 8*V.

b.
An AL representation requires an array of V pointers (the starts of the lists),
and then one node for each edge in each list.
The total number of edges is 2*E.
A node is an integer plus a pointer, which is 4+8 bytes.
This gives 8*V + 12*2*E.

c.
So if 8*V + 12*2*E < 4*V*V + 8*V then the AL version requires less storage.
Simplifying, if E < V*V/6 then AL requires less storage.

If you have a largish graph of 100 vertices, then up to about 1666 edges (which is a lot)
it is better to use AL if storage is the main issue.
As V gets very large, the factor 6 becomes insignificant.
Hence asymptotically if the number of edges is less than V*V then AL is more space efficient than AM.

d.
If the adjacency matrix is just 1 byte instead of 4 bytes, then the formula is E < V*V/24.
